* long term goals
** strategy
*** development: focus on infrastructure, research or industry
*** different solars have different resources
    specific research projects
    specific production
*** research directions
**** vision
**** stealth
**** espionage
**** propulsion & navigation
**** weapons
**** shields
**** infrastructure
**** democracy
*** diplomatic agreements
**** cease fire
**** peace
**** military alliance
**** trade agreement
*** population
    Population can be distributed between production goals

    A political system makes the population happy but limits
    population distribution choices

    A happy population grows

    A large population without infrastructure becomes unhappy

    An unhappy population does not produce well

    Each solar's population has trends of opinion concerning
    development focus and diplomacy
** tactics
*** different ship types
**** bombers
     good at bombing solars
     bad at fighting any other ship
**** fighters
     good at fighting battleships
     bad at bombing solars
**** battleships
     good at destroying bombers
     bad at fighting fighters
**** transport
     automatically deployed ship for trade agreements
*** terrain types
**** nebula
     damaging area with low sight
     find rare resources
**** high temperospatial curvature
     chance of worm-holes
     low navigation: risk going off course
     small ships risk falling in worm hole
**** asteroids
     slow travel speed
     find resources
     [low shields] risk damage
*** moving solars
*** fog of war
*** barbarians
* basic goals
** server game
*** universe increment
**** solar evolution
     building solar system, remember to add serialization
**** ship interaction radius
     ships don't seem to interact, check grid functions
** client game
*** command generator ship selection
*** write selector::get_ships, remove selector::get_quantity
*** add [solar|fleet]_selector::allocated_ships
*** rectangle upwards select does not work
*** command default: all ships
*** command quantity alternative: all
*** simulation: interpolate using ship velocity
*** translate: upgrade to sfml2.2 to get window::hasFocus()
*** events board
    messages such as "your fleet was destroyed" or "your solar X
    merged with Bla's solar Y; your population won the ensuing battle"
** before game interface
* remember
** when updating a struct/class, also update serialization
* git pending
** added ship.cpp
** added research.h
* fixed
** why is client receiving sig abort on disconnect? thread-related?
   exit was called in query thread
** game_data::increment (ship update)
** add fleet id tracker to ship, implement in apply choice
** game_data::apply_choice
*** planet command
*** fleet command
** fixed command incrementation interface, added fleet serialization
** merged draw and data responsibility in selector in client::game

** translate, zoom
** test event handling
    why don't commands show? - translate before rotate!
    why does selection rect draw at odd places? - use e.mouseMove.[x|y]
    why area select when click? - just tiny area select?
    find how to scale command arrow only lengthwise - transform order
** added utility
** client game: choice event return value
** server com: allocate/deallocate packet
** client game: draw command
** client game
*** build choice interface
**** clicked_at
     make a "selectable" class with meta info: id, type etc.
     
     make commands from and to selectables? or just from? just track
     selection? go back to having a "selected" attribute?
**** make_command
** split com into socket_t, com_client, com_server
** replaced client's game_handler with struct client_game
** implemented command serialization
** started writing choice_event handler
** client game
*** area_select
** server game
*** universe construction
**** game settings object
**** solar distribution
** client view dimensions set to match game_data.settings
** client simulation play/pause with space key
** fixed rudementary game_data build routine
** added game settings attributes
** fixed operator <<(packet, solar)
** added solar to drawing
** removed id attributes (stored in has map pair)
** added player to game_data 
** client game_data g0 should update after simulation
   replaced socket_t by socket_t* in query function

   apparently, passing ref(socket_t) (probably its the
   ref(sf::Packet?) to thread causes ~thread() which in turn causes
   abort
** server receives choice
   related to copying packets - fixed by using client_t* instead of
   client_t in queue.  

   gets n=-9744, for some reason still enters push loop. Test run with
   &&res in loop condition. Check if n is wrong from start.
   
   
