* current work
* system design ideas
** [J?] introduce physical_game_object for ship and solar
   This way, we can limit targeting to physical entities, and avoid
   the hassle with tracking fleets when they split. Also, non-physical
   entity classes don't need to implement interaction related
   functionality. Also, client can reconstruct non-physical entities
   at will.
** [J?] make all interactions be buffered and then evaluated in post phase (remove solar post phase stuff)
** [J?] make landing be an interaction
** add trade ships
** reduce fleet actions, replace with fleet response policies
** add trigger system for e.g. upgrades, techs and solar facilities
*** hm_t<string, function> on_interaction (and prevent_interaction)
*** on_takeoff (for e.g. freighter ship)
*** extra_solar_dynamics
** ?add a "dynamic data" hash map to game object
   For stuff like "has cargo x", "is jammed", "was scanned by player i" etc.

   No particular reason to not put this i normal class members?
** solar development tree
   Just something a little bit more fun than "expansion[i]", e.g. move
   turrets here.
* tweaks and fixes
** use solar radius to indicate resource quantity
** autocompute sufficient mining for solar
* [!] issues
** [!] bugs & crashes
*** [J?] when attacking solar: ends at: distributed -1 of 99 frames to 0: end
    Did send 99% of frames to client. Does not pass "client x is done".

    Caused by incorrect loop termination condition
*** simulation step hangs on key escape abort game
    This was when client 1 aborts at frame -1, while client 2 is still
    in choice step. Server exits with error 'disconnect' and other
    client gets segfault. Perhaps the server failed to receive the
    leave game request from client 1 while it was waiting for the
    choice from client 2.
** [~] interface improvements
*** Clicking interface response button also triggers click on minimap
*** ?setting solar template removes build info separators
*** more centralized desktop geometry info
*** sfg window does not resize on sfml window resize
*** priority buttons unresponsive to first right click
*** command selectors drawn on top of each other
** [~] game mechanics improvements
*** some colonized solars have trouble with population dying off (check water supply etc)
*** need "unique" identifier for radar turrets
    Or rather, need radar turret to be a unique building rather than a
    turret.
** [!] code design
*** ?move keywords and allocations to "types.h"
*** move expansion costs to research?
* remember
** when updating a struct/class, also update serialization
* git pending
* fixed
** military template needs to respect ship build dependencies
** targeting a waypoint should not create a new waypoint
** float hp for ships
** selecting research should add it to "researched"
** research
*** [J] define choice::c_research
*** [J] research::data constructor
*** [J] research::data + choice::c_research serialization
*** [J] research choice gui
** Invalid (scrambled) research choice submitted
   Temp name variable was passed byref to button handler
** upgrade / interaction / game object makeover
*** [J] solar choice for invalid player after conquering solar
*** [J] make fleet selectors for enemy fleets
*** [J] ships should auto-engage
*** [J] newly colonized solars' dynamics generate NaN in all fields
*** [J] idle shouldn't be an action
*** [J] join fleet shouldn't be an action - use waypoints
*** [J] ships shouldn't be selectable
*** [J] trouble selecting things under non-owned things
*** [J] Colonize and join fleet commands are abandoned
*** [J] solar choice resets
*** [J] Need to remove "unseen" units when the area becomes seen
*** [J] insert + make_split loop in grid_tree causes segfault
    After giving a waypoint with some units an empty command "space combat"

    Fixed make_split criteria using median instead of mean
*** [J] distribute ships: way too spread out
*** [J] fleet selector: way to big
*** [J] Segfault 
    Apparently had to do with fleets loosing sight of targets and
    calling get_entity and stuff (and possibly passing shared_ptr to a
    temporary lambda function), however the main lesson is that
    unhandled exceptions from threads are not displayed properly in
    the debugger.

    After finding an enemy ship in game_data::search_targets(), at game_data.cpp:296

    Switched back to normal pointers, which helped in a simplified
    case, but now there is instead a sigabrt in the thread destructor
    of distribute_frames thread, right after ship fire.

    Consider deleting game_data copy constructor and only doing
    explicit assignment, possibly also explicit destruction.
*** [J] Figure out why server sends old waypoints in [prestep?]
*** [J] Figure out why commands dissapear 
    ... from waypoints (or only from selectors) without passing the
    trigger point

    Command selectors were not being rebuilt for waypoints
*** [J] change identifier::some_class_id to the_class::class_id
*** [J] introduce game object base class
**** [J] created base class header
**** [J] made game entity classes inherit game object
**** [J] inherit pre/post phase functions in game object classes
**** [J] define ptr classes (grid::tree should have a unique ptr?) and create functions
**** [J] change to virtual inheritance of game_object so entity_selector subclasses don't get duplicate inheritance
**** [J] add new files in build system: game_object, ship, waypoint
**** [J] go through game_data.cpp and move code to object classes
**** [J] implement game object class functions
**** [J] add fleet action functions e.g. land 
**** [J] the fleet is responsible for tracking action validity when target status changes
**** [J] fleets need to update data in pre phase and remember to update target position
**** [J] add an interaction class declaration
**** [J] implement the interaction class
**** decide how to distinguish between owned and non-owned target conditions
*** [J] add an upgrade class
*** [J] let ships have reference to upgrades instead of interactions
*** [J] let upgrades have interactions and stat-mods
*** [J] let upgrades define exclusivity for certain terms
*** [J] let ships have a compile_stats function, base and current stats
*** [J] let ships have a compile_interactions function
*** [J] let combat interactions use a ship::receive_damage function
*** [J] for each ship, check each interaction target condition for each target
*** [J] rebuild ship templates so they apply upgrades
*** [J] let the ship increment function be responsible for updating load time
    the interaction functions will be responsible for activating load time
*** [J] consider introducing a game_data::find_targets
   Conditioned on a ship::target_condition and a radius
*** [J] add fleet action definitions
*** [J] finish implementing new serialization/deserialization
*** [J] fix client game reloading of waypoints
*** [J] implement client game deserialize of game data
*** [J] remove game_data deserialize operator
*** let upgrades have an optional tick function
*** let upgrades have description 
*** [J] let upgrades define ship class exclusivity conditions
** invalid? allowed allocation from fleet and waypoint in parallel
    FIX: fleet selectors at waypoints initially have a command
    targeting the waypoint
** guaranteed_cast template for selectors instantiated in utility.cpp
**** needed because definition must be avilable
**** problematic because then utility depends on selector and graphics
**** FIX: moved to separate instantiation file
** BUG: client recieves distorted game object data
**** game_object component correct so far as specific_selector::create
**** for solar: c_military and beyond, data is scrambled
**** when displayed, all data seems corrupted
** BUG: ship function recieve_damage() is not serialized
    Need to externalize these functions.
** moved selector cast template instantiation back to utility
** implemented specific_selector<ship>
** implemented specific selector create function
** ship vision
** utility::random_int
** moved deserialize to com_client to avoid excessive server deps
** make minimap clickable
** get rid of sfml sub repo?
** hover info should depend on ownership
** exit query should listen to escape/return key events
** c_solar::template_map: multiple calls to empty_choice() crashes
    After second call, returned choice is *really* empty.
** military template sucks
** solar gui has transparent background
** no info about available resources in solar gui
** fixed bug: ship not removed after colonize before ship_solar_int
** fixed bug: com_client::query catches winner message
** fix ship swarm movement
** end game status not displayed
** After fixing leave game, server says invalid query on simulation
** lacking proper leave game functionality
** why does sending frames take so long?
   turns out this is game_data.increment()
** go through game_data::increment
** ships not showing on client since sockets redesign
** server socket mess
*** client_t must deallocate it's TcpSocket on dtor
    ... so that check_protocol can remove dc clients

    ... and server main must not deallocate them

    Perhaps move listening/accepting to server::com?

    Perhaps inherit sf::TcpSocket?
*** server::com needs a method 'bool has_multiple_clients()'
    To be run after check_protocol
*** check for protocol::leave in simulation step as well
** projectile graphics object
** sub divide solar dynamics so components are accessible from gui
** consider moving sub window classes to main window build routine
   so they can access tooltip etc.
** solar system stability tests
**** parallel cost subtractions
** turrets do no damage? take no damage?
    look over solar combat routines
** solar choice has negative values in solar tick
    possibly fixed by initializing summation var in allocation::count

    possibly fixed by limiting water usage checks to expansion
    sectors
** crowding death goes to NaN
** notes on some bugs
** fixes to solar dynamics resource payments
** ship build run away (increase cost/time?)
** bad default solar choice (add templates?)
**** added choice templates
**** how should choice template buttons trigger allocation button update?
     consider connecting a custom signal?
     remember to set sub window to build_info()
** sector expansion happens without resources
** added basic solar info
** added listening to proceed button
** digits are ugly
** clicking a solar (sub) query priority button causes segfault
    fix: used a normal pointer to the button
    since introduction of referenced buttons in event handlers
** clicking in solar gui also triggers game object event handler
** accepting solar gui does not destroy priority buttons
    fixed: byref widgets to event handlers
    ... nor does it destroy sub window buttons
    maybe stuck in event functions?
** frame rate is to high
** simulation step is not drawn
    Solved: fixed a bug where the simulation step event handler forgot
    to return a value.
** interface is drawn on mini-map^^
    Solved: note: sfgui draws on the latest view which was drawn upon,
    not on the current view!
** generalized client game window loops to a function
** adding a Box::Ptr in a Window fails internally (graphics.cpp: 209)
    error: bad_weak_ptr
    std::shared_ptr (count 4, weak 2)

    Probably caused by that methods are not called through a shared
    pointer in the constructor? Move constructor to create method...
** check that serializations still match content
** check choice sub allocation for military
** check that all initialize-functions are called
** figure out why file-global allocation sub classes init empty
    probably the keywords data they use is not initialized?
    moved to initializers
** c_solar::normalize uses countable_allocation::normalize
** fixed compile step errors
** [done] consider adding named string constants for sub sectors etc.
** fix: serialization templates prefer general over specific
** made specific allocation classes
** [done] add a turret class
** [done] implement vectorised allocation templates in graphics.cpp
** [done] apply updated solar (choice) structure in solar_tick
** figure out how to limit sub sector priority
** [done] default values for solar choice
** moved solar::choice_t to choice.h
** [done] finish cost.cpp
** [done] client_game::build_choice should link game object events to interface objects, e.g. solar clicked
** selector queue cycling
** targui scales with zoom
** comgui does not show action
** targui remembers selected entities
** targui text does not fit width
** [done] add to command: action (from above options)
** [done] add command::action to command::operator ==
** [done] add queue_level to command_selector
** [done] add queue_level checking to command_at
** [done] replace entity_at with entities_at
** [done] replace right click event handler with target option gui
** [done] implement command action in game_data::increment
** display victor
** client generated solar choice for other player's solar
   maybe happened after the solar was conquered?
   
   probably fixed: removing choices for non-owned solars in
   client::game::reload_data
** send victor to client on game completion
** solar gui does not draw buttons in resized window
** sending colonizer ships spends population
** template selector is ugly
** colonisation/transport ships
    and make some solars without defense
** incorrect population increment shown
** should respond to return/escape keys
** does not terminate on window close event
** minimap drawn over comgui
** [low priority] minimap bounding box drawn incorrectly after window resize
** defense build rates need to be checked
** fleets follow targets that leave sight
   check range of sight in update fleet data?
** fleets follow last assigned in split
** templates and feedback in solar gui
    show per round increments in overview
** [fixed?] solar gui lists increments per unit time
   game settings stores round length in ticks
** moved dt from game_data to game_settings to avoid duplicate in client_game
** removed entity_selector::allocated_ships
** setting up autotools
   aclocal generates aclocal.m4
   automake --add-missing uses configure.ac, aclocal.m3 and Makefile.am to build Makefile.in
   autoconf uses configure.ac to build configure
   configure uses Makefile.in to build Makefile
** [low priority] command_gui scales with zoom
** add template selector to gui
** implement templates in solar_gui.cpp
** faster initial expansion
** [fixed for single fleet relocation] fleet targets are lost on split (new id)
** fixed: orders targeting unseen targets disappear
   also targeting fleets that leave sight
** fixed a bug where bombarded solars get negative defense/population
** add attribute bool entity_selector.seen
    store entity selectors, but unset seen each round. Show non-seen
    entities as semi-transparent, non-interactive.
** fixed: player colors difficult to distinguish
** fixed: waypoints not dissapearing (had erased waypoint removal)
** fleets sent to waypoint remain idle
** fog of war
*** [done] give ships attribute sfloat vision
*** [done] give fleets attribute sfloat vision
*** [done] add fleet.vision to serialisation
*** [done] update fleet.vision in update_fleet_data()
*** [done] give solars attribute vision
*** send limited game data objects to client
     a fleet or solar is seen if it is owned or within vision range of
     an owned fleet or solar.
** research should influence ships
** fixed a bug where solar ships were not sent to client
** gave ships vision
** fixed a bug where waypoints were cleared between choice evaluations
** added research to solar gui
** added research influence in ship constructor
** added research to serialization
** solar choice interface
** replaced waypoint.landed_ships with checking fleet idle target
** added minimap, fixed text scale and position
** tempfix for: fleet growth goes negative
** fixed: idle fleet sent to waypoint remained idle
** fixed: waypoint removed though having landed ships
** research pooling
** better game round phase indicators
** command_gui should sort ships by type
** added ship class sub tables in command_gui
** fixed: ships that have left or died remain listed at waypoint
** fixed: fleet evaluation order impacted battle result
** added an entity_selector -> queue_level (select order queue)
** fixed: comgui does not close after choice step
** fixed: fleet speed limit = min(ship.speed)
** fixed: prevented creation of circular graphs
** fixed: when client deletes command + wp, server reinserts wp
** fixed: server removes waypoints with landed ships
** fixed: ships fire in order of fleet, unfair
** fixed: when targeting a fleet, server crashes because id changes
** fixed: fleet idle target
   when arriving to waypoint or client unsets command
   (waypoints now store landed ships)
** fixed: waypoint graph reconstruction
** fixed: command receive printout
** fixed: waypoints created when no sources selected
** fixed: fleet radius can decrease indefinitely
   the radius must be large enough so the player can select the fleet
** graphics::draw_ship different types and param scale
** discovered some new bugs, see notes.org
** fixed: waypoint pending_commands not updated
   for some odd reason fixed by looping over 
   for(k,v in all_wp) waypoints[k] = v;
   instead of assigning
   waypoints.insert(all_wp.begin(), all_wp.end());
** fixed: server seems to list waypoints multiple times
   caused by multiple \n in id?
   note that clients resend old waypoints!
** fixed: commands on waypoints are not handled in choice phase
** fixed: waypoints targeted by waypoints are deleted
** fixed: fleet does not show radius after waypoint trigger
   and can't be selected
** fixed: client rectangle upwards select does not work
** fixed: fleet position seems to be off
** added ship scale to draw routine so ships are larger in command gui
** fixed recursive ship increment/decrement through waypoints
** fixed a bug where remove command deleted the wrong entity
** command distance checker sees past end points
** best way to add external dependencies
   added sub directories to make
   consider linking to their git repos?
** when giving multiple fleet commands, all ships are assigned
** added command_gui
** added SFML and TGUI as submodules in external/src
   make will build them in external
** simplified ship drawing selection in game::draw_universe
** window transforms should remain to next round
** add waypoint to game_data serialization
** fix waypoint id check in game_data::target_position
** fixed relocate ships setting new ship fleet id
** add waypoint objects
    so that: 
    o commands don't need child commands
    o multiple fleets can meet at a waypoint
    o commands aren't source/target entities
** commands should not be targets
** solar system
** write selector::get_ships, remove selector::get_quantity
** upgrade to sfml2.2 
   to get window::hasFocus()
   to enable building ~/code/include/TGUI-0.6.7
   (note that tgui 0.6.6 should work with sfml2.0)
   https://tgui.eu/
** build and test ~/code/include/TGUI-0.6.7
** why is client receiving sig abort on disconnect? thread-related?
   exit was called in query thread
** game_data::increment (ship update)
** add fleet id tracker to ship, implement in apply choice
** game_data::apply_choice
*** planet command
*** fleet command
** fixed command incrementation interface, added fleet serialization
** merged draw and data responsibility in selector in client::game

** translate, zoom
** test event handling
    why don't commands show? - translate before rotate!
    why does selection rect draw at odd places? - use e.mouseMove.[x|y]
    why area select when click? - just tiny area select?
    find how to scale command arrow only lengthwise - transform order
** added utility
** client game: choice event return value
** server com: allocate/deallocate packet
** client game: draw command
** client game
*** build choice interface
**** clicked_at
     make a "selectable" class with meta info: id, type etc.
     
     make commands from and to selectables? or just from? just track
     selection? go back to having a "selected" attribute?
**** make_command
** split com into socket_t, com_client, com_server
** replaced client's game_handler with struct client_game
** implemented command serialization
** started writing choice_event handler
** client game
*** area_select
** server game
*** universe construction
**** game settings object
**** solar distribution
** client view dimensions set to match game_data.settings
** client simulation play/pause with space key
** fixed rudementary game_data build routine
** added game settings attributes
** fixed operator <<(packet, solar)
** added solar to drawing
** removed id attributes (stored in has map pair)
** added player to game_data 
** client game_data g0 should update after simulation
   replaced socket_t by socket_t* in query function

   apparently, passing ref(socket_t) (probably its the
   ref(sf::Packet?) to thread causes ~thread() which in turn causes
   abort
** server receives choice
   related to copying packets - fixed by using client_t* instead of
   client_t in queue.  

   gets n=-9744, for some reason still enters push loop. Test run with
   &&res in loop condition. Check if n is wrong from start.
* [old] basic goals
** server game
*** ship interactions
**** structure
***** let ship interactions be governed by interaction functions
***** introduce a ship specific table keyed on [action, t_target]
***** let the ship templates build the interaction function objects
***** interactions require the game data context to be available
***** may need an on-action-setup trigger for e.g. trade routes
***** let ships define a list of valid interactions
***** extension: let researched upgrades extend the interactions
**** list of
***** cargo ship, friendly solar: trade route (resource allocation?)
***** colonizer, neutral solar: colonize
***** fighter, enemy fleet: engage
***** bomber, enemy solar: bombard
*** consider neighbourhood trackers for ships
**** key the ship grid on player
**** look up friendly neighbours for boost interaction
**** look up opponent neighbours for fire interaction
*** fleet actions
**** require that all, some or no ships have some action available
**** available actions are extended by those defined by all ships
**** action complete callback for e.g. resume action after combat
**** also has reaction mode: engage on sight / focus target / flee
***** engage on sight is conditioned on: some fight
**** on interaction, run ship interaction functions if available
**** list of
***** none, friendly solar: land
***** some bombard, enemy solar: bombard
***** none, friendly fleet: join, follow
***** some fight, friendly fleet: guard
***** none, enemy fleet: follow
***** some fight, enemy fleet: engage
*** introduce cargo ships for mining colonies
*** introduce priorities with cost multipliers for ships
*** let ship build be conditioned on research and industry level
*** research structure
**** hash table
**** nodes with:
     requirement list
     cost
     level
     level-dependent modifier functions
     allow list
*** decide what to do with clients without objects
** client game
*** new command gui and target gui
**** target options: based on fleet and ship actions
**** targui defaults (depends on action design)
***** send all if from waypoint
***** send colonizer if command is colonize
***** only show gui if multiple targets
***** don't show self as target
**** command_gui should have option to allocate X ships of type T
*** choice/evolution: display ready players, autoplay when all ready
*** simulation: ?interpolate using ship velocity?
*** draw all ships in same size, have a ship.draw_scale
    so that ships can be drawn in same size in command gui
    but different sizes in universe
*** events board
    messages such as "your fleet was destroyed" or "your solar X
    merged with Bla's solar Y; your population won the ensuing battle"
** before game interface
* [old] long term goals
** strategy
*** different solars have different resources
    specific research projects
    specific production
*** research directions
**** vision
**** stealth
**** espionage
**** propulsion & navigation
**** weapons
**** shields
**** infrastructure
**** democracy
*** diplomatic agreements
**** cease fire
**** peace
**** military alliance
**** trade agreement
** tactics
*** new ships with trigger functions
**** make a solar build queue
***** ship/turret designer interface
***** ship design focus/priority
*** resources on map to match with buildings?
*** old ship model
**** ship components
    construct on grid with structure components? 
    each component has a type, size, energy usage, cost...
**** engine
**** energy
**** shield
**** weapons
**** hull
**** life support
**** cargo hold
**** ship types
***** bombers
     good at bombing solars
     bad at fighting any other ship
***** fighters
     good at fighting battleships
     bad at bombing solars
***** battleships
     good at destroying bombers
     bad at fighting fighters
***** transport
     automatically deployed ship for trade agreements
**** ship experience and fleet commanders
**** add ship rotation speed and ships can only fire forward
** world
*** generate map while exploring
*** define discovered area for players
*** treasures in space
*** terrain types
**** nebula
     damaging area with low sight
     find rare resources
**** high temperospatial curvature
     chance of worm-holes
     low navigation: risk going off course
     small ships risk falling in worm hole
**** asteroids
     slow travel speed
     find resources
     [low shields] risk damage
*** moving solars
*** barbarians
