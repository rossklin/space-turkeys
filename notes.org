* Notes test game 2020-08-14
** The ship combat equations
FlexWeight = 1 x (angle_diff(a, angle(p2 - p1)) < Pi x CannonFlex)
AccuracyCheck = Accuracy x FlexWeight x 30 / (|p2-p1| - 1)
EvasionCheck = U(0, Evasion x 10 / Mass

Hit if AccuracyCheck - EvasionCheck > 0
Damage = N(Damage, 0.2 x Damage)

Example deployed Cannon vs Fighter
Cannon: 
P hit at dist 101 = P{ 2 x 30 / 100 - U(0, 2 x 10 / 3) > 0 } = P{ 0.6 > U(0, 6.7) } = 9%
P hit at dist 51 = P{ 2 x 30 / 50 - U(0, 2 x 10 / 3) > 0 } = P{ 1.2 > U(0, 6.7) } = 18%
P hit at dist 21 = P{ 2 x 30 / 20 - U(0, 2 x 10 / 3) > 0 } = P{ 3 > U(0, 6.7) } = 45%
Shots to kill: 1
cost 6 res
hp 5
damage 10
accuracy 2
evasion 0
cannon flex 0.1
load time 5

Fighter:
P hit = P{ 2 x 30 / (d-1) > 0 } = 100%
Shots to kill: 5
cost 6 res
hp 2
damage 1
accuracy 2
evasion 2
load time 5
cannon flex 0.2
** [test] Fighter shot animations quite heavy and long
** [test] Increase friction and/or add free rotation thrusters
** [test] Deployed cannons are way to weak, can barely kill fighters
** Ships in fleet need to come together when they get disjointed
** How to handle deploy action for multiship fleet
** Network error "failed to deserialize key" or something when pressing done in simulation before other client pressed commit
** [impl] Event log overflows onto hover info
** Deploying (and other actions?) should remove the command
** Solar defense animation should fire from radius not from center
** Deployed cannons need a direction instruction attached to action
** Again crash in reload_data when updating fleet position after spotted unseen ship
Could be either after colonize or after all ships in fleet were destroyed
** Background for selected buttons is hard to see
** Target GUI should not show target sub panel if there is only one target option
** Target GUI should either be centered or attached to game view
** Add waypoint property: face direction
** Commit button still shows in simulation phase
** If implementing a fleet count limit
Must compute the number of fleets that would finally result from
resolving all commands
** [impl] No event log item for ship death
** [impl] Missing Command GUI option to delete command
** [done] Some combat animations missing
*** No animations first round, 2 ships died
*** All animations at start of second round, none at end
** [impl] Command GUI must update count when changing ship class
* Notes test game 2020-06-22
** UI updates
*** Popup dialogue hbars do not fill width
*** Use consistent styles for choice-buttons, enquer-buttons and queue-items
*** UI overflow scrollbars
*** [impl] Target gui button options fixed width less than content
*** [impl] Simulation interface: needs progress bar, show base panel but not commit button
*** [impl] Update simulation gui progress bar
*** [done] Show "loading" before join game
*** [done] Right panel appears in lower left after layers update
*** [impl] Acute need for proper style matching rules
*** [impl] Bind global button handlers to components
** bugs
*** Network hang when sending choice, seems server debug session crashed, shorten timeout
*** Error in fleet::analyze_enemies
    get_hp() returns 0, causes dps_scale to be Inf, crashes at:

    prio_idx = utility::vector_min<float>(heuristics, utility::identity_function<float>());
*** [verify] Animation time values are extreme, cause alpha ~1e-100
*** [impl] Base panel still disappears when starting simulation
*** [impl] Simulation gui shows in bottom left
*** [impl] Finish area select on minimap should trigger area select, not minimap
*** Font displays ugly in UI
*** Ship stuck circling target, increase friction?
*** (irregular) Server segfault on colonize
*** [verify] Command GUI slider max limited when changing ship class
*** [verify] Client crash after colonize
Probably caused by client skipping reload data on sim_idx = 0, which
is where the first fleet is listed in remove_entities. Update
next_sim_frame logic to load frame 0.

Triggered at client_game.cpp:1199 reload_data when a fleet still
contains a ship id for a ship which was removed due to being "unseen".

Server should call ship::on_remove which should remove the ship from
the fleet, and then remove the fleet, at end of increment step. Client
should receive a listing in remove_entities.

Instead, client detects the ship in "spotted unseen ship", so for some
reason the fleet did not register in remove_entities, why?

*** [impl] double simulation gui displayed at end of phase
*** [done] Out of range error when asking to join nonexistent game
*** [impl] check_background_tasks should call get() to trigger exceptions
*** [impl] Tell server quit causes network exception on client::query -> receive_packet 
*** [done] After scroll, content shifts position on next update_layout
*** [done] Map index crash in simulation step when sending ships
*** [done] Server should only send seen entities on first load, send opponent starting positions separately instead
*** [done] Global game::window used only for graphics::unscale, seems silly?
*** [done] Target GUI click does not stop event propagation to area select
*** [done] Irregular segfault when starting second client
*** [impl] Command GUI still has byrefs in cosures
*** [impl] Random nr (10-100) of UI tasks run every time a solar is hovered
*** [done] Development choice seemed to work only first time
*** [done] Research panel layout 
**** buttons hidden below edge of window
**** panel height should be fixed
**** selected card should be styled
**** selected card info should appear when no card is hovered
*** [impl] Prevent propagation of left mouse pressed event on button/activatable
*** [done] Client does not center on home solar on startup
*** [done?] One solar built 0 of 5 fighters in a round (then showed shipyard level 3 -234823482364% complete)
*** (maybe) development queue item dropped
*** [done] Production seems to be nearly instant
    Defer to "Solar dynamics" update
*** [impl] Path search fails to remove extra initial nodes
*** [impl] Client side impl of fleet and ship limits
Note: server limits ships sent but not ships registered for transfer at waypoint
*** [done] Client displays max fleets as 2, should be 4, not finding owned solar?
*** [done] Parameters showing uninitialized values in gui at start of turn
*** [done] max fleets and max ships per fleet
** Layers should have a view connected to them (so target gui can be on game view)
** new GUI
There is no (documented) way to handle styles for SFGUI Widgets so
sadly I will need to write my own GUI lib. The examples don't even
work.
** Solar dynamics
   Simple idea (check vs current impl):
*** [done] All build time expressed in rounds instead of frames and happens at end of round
*** Each population increases ship build, research and defense by e.g. 20% rounded down
*** Each level of shipyard or research fac. adds one production point per round
*** Sending colonizer removes one population
*** Possibly, organics resource should determine max pop rather than being used when building pop		
** Terrain mechanic
*** Units can still enter impassable terrain
*** Ships can shoot through impassable terrain
** Would like indicators for progress etc in right hand menu
Eg research progress, ship and building progress, empire stats such as max fleets
** Stats for solar: show order, growth, production and research per round in stats panel
** Graphical symbol for solar government choice
** Governor screen 
*** Apply to all solars if none selected
*** Add description of development choices
*** Add "Set development priority to X for all N selected solars"
** Military screen
*** Apply to all solars if none selected
*** Allow queing multiple items
*** Add "Distribute production of the requested units among N selected solars"
*** Add "Will take T turns and use X resources in total"
** Colonizer: disallow building until pop can support it
** Solars in starting sector are off color chart in resources so all grey
** Event log: colour coded entry cards which fit in the window, grey out previous turns
*** Click to go to location
** Scouting: what happens when "some people join"?
** Map properties
*** Add solars without organics to force players to transport resources to habitable solars
*** Have more terrain between solars rather than fields of solars
For example, make clusters of one or two habitable solars and a couple uninhabitable solars
and then add terrain between them.
** verify
*** [impl] Make main panel prevent click event propagation
*** [impl] Hover info shows nothing, does not fit in window
*** [impl] Event log and hover info should be 100% width or transparent background
** [impl] Might need a mutex for socket, since used in parallel by load_frames
** [impl] Segfault in solar_gui
   In building_button_callback, p_building_queue is 0
** [fixed?] Weird X11 assert failures in sfml after data loaded, control_event > sf::Keyboard::isKeyPressed
Maybe caused by starting init_data sequence before initializing ui layers
** [done] Simulation phase causes network disconnect which is ignored, why?
Simulation step was called before send_choice
** [done] map::at throws out of range error or something in draw_window after first sim frame is loaded
   Not caught by gdb catchpoint for some reason

   Caused by command.ship_class not added to serializer
** [impl] Global key bindings seem to be disabled
   Caused by game::any_gui_content checking base layer
** [impl] Clicking in target gui triggers area select
** [impl] Move global event handler responsibilities
*** Choice events (run above base layer)
**** Area select
**** Drag waypoint
**** Clear/setup target gui
**** Key space: choice complete
**** Key return: solar gui
**** Key delete: delete commands
**** Key escape: quit popup
*** All phases events (run above context layer)
**** Update hover info
**** Zoom in/out
**** Drag map
**** Click minimap
** [done] Component should have parameters for allowed scroll directions
* current work
** SEVERE memory leak in client game::draw_window
** Restructure to Makefile and RSG
*** [impl] Update json file refs to data directory
*** [impl] Save files in save directory
*** [impl] Re-implement all SFGUI components in RSG
    [done] game::get_ready_ships should sort by class
    [done] command_gui should take parameter max ships per class and allow selecting which class to send
*** [impl] Restructure main window loop and event handling
** Add "order" concept which limits growth/production in distant solars
** Update research and upgrade data according to sketch
** VSC formatting
   Command "format document" CTRL + SHIFT + I

base on @Chris Drew's answer

Go Preferences -> Settings
Search for C_Cpp.clang_format_fallbackStyle
Click Edit, Copy to Settings
Change from "Visual Studio" to "{ BasedOnStyle: Google, IndentWidth: 4 }"
e.g.

"C_Cpp.clang_format_fallbackStyle": "{ BasedOnStyle: Google, IndentWidth: 4, ColumnLimit: 0}"
btw ColumnLimit: 0 is helpful too, because google limit will break your code to next line when you do not need it.
** military production choice should work like "governors"
** limiting factors
   Add some limiting factors e.g. max fleets, max ships per fleet, max
   population per solar, reduced production if too many or distant
   solars etc.

   Add developments (research) which modify these limits.

   Consider having distinct facilities to generate research and
   culture, with distinct development trees. The above would in so
   case fall under the cultural development tree..?
** notes from game
*** [done] Research panel should open if none selected
*** [done] Available actions must be limited when ships are assigned
*** [done] On action "deploy" in client: terminate called without an active exception
*** [done] solar always says "0"
*** [done] Only allow one ship type per fleet
*** ship icons too similar
*** command flags should be on bottom layer
*** solar color not affected by resource ratio at large quantities
*** search message for population rounds to 0 people
** ship movement
*** [done] combat: stay on target till not available
*** [test] collide with enemy ships
*** [impl] distribute ships so they don't collide
*** when search finds ships, they also should not collide with the scout
*** check that ships actually use private path
*** test movement of different ship classes, with upgrades etc
** balancing
How to count time? I.e. 3000 res = time spent building 1 colonizer, growing 1 pop and flying to a solar?

1. reduce fighter in general
2. improve battleship in general
3. improve destroyer vs corsair and fighter
4. reduce hm
*** mid game
7(3): down: corsair > fighter
13(2): down: battleship > corsair
7(2): down: fighter > battleship
*** late game
25(10): down: destroyer > battleship
8(1.7): down: voyager > corsair
0.2(3): up: destroyer < corsair FAILURE
7(10): up: corsair > fighter
1.7(2): up: battleship > corsair
0.1(2): up: battleship < fighter FAILURE
*** late hm splash
8(3): down: battleship > fighter
*** late splash
0.3(3): up: destroyer < fighter FAILURE 
*** late hm
0.17(1.7): up: corsair < fighter FAILURE
24(2): down: fighter > battleship
** play testing
*** [?] building first colonizer takes too long
*** [?] first research takes too long
*** [?] population growth a bit slow
*** [tempfix?] vector_min: no finite values found!
    st3::fleet::analyze_enemies (this=0x7fffec20fc00, g=0x7ffff4e4fa00) at fleet.cpp:274
*** [?] fleet must "activate" when first ships reach target
*** command policy label covers unit and waypoint
*** log is ugly
*** auto search should select the closest next solar
*** suggest select research first turn
*** items that get hovered while the mouse is inside the info box should not disrupt the info
*** gui is too small on large screen, set fixed video mode or scale text to relative size
*** [J] command gui is terribly laggy
*** [J] slower ships left behind
    fleet::speed_limit and ship::max_speed seem to be correct, perhaps
    an issue with swarm behaviour?
*** [J] make collisions conserve energy
    e = 0.5 m v²
    de/dt = m v dv/dt
    dv = f / m dt
    f = max(r0 - r, 0) {p = r²/2 - r0 r, r < r0}
    
    I.e. when ships collide, check what their kinetic energy is (was),
    calculate how far into the potential they should have come. If
    they went further in, that is a discretization error so correct
    the position.
*** [J] starting_fleet: massive, in apply choice: entity not found: ship:29
*** [J] ships should not collide with friendly ships in other fleets
*** [J] Ships get stuck in "traffic jam" (perhaps resolving avoid collision stuff?)
*** [J] Need to move ships out of terrain
*** [J] Identified error in path search algorithm
    Convex path around sub object may intersect "parent" object,
    causing infinite recursion. Need to step to next parent vertice
    somehow, or possibly include parent vertices when building convex
    path.
*** [J] corsairs got weapons: -2934193417934% on client side
*** [J] ships sometimes pass through terrain without being pushed out
*** [J] ship terrain interaction: dumps ship at triangle midpoint, probably goes to fallback case
    Calculation discrepancy between triangle_relative_distance and
    line_intersect, introduced new utility::in_triangle.
*** [J] get_path produces paths far from vertice points which risk intersecting adjacent terrain
*** [J] looks like ships get pushed to wrong angle when they hit terrain
*** [J] get_path creates multiples of same point, probably in "path_around", causing "same point" in line intersect
*** [J] new get_path not working, intersects objects in recursion
*** [J] still get occasional fallback case "ship already in terrain"
*** solars still get stuck in terrain
*** got large number of "line_intersect: same point" at one point
    Possibly caused when ship enters impassable terrain?
* [~] issues
** [~] system
*** residual waypoints when ship is killed
    Also residual path node indicators - maybe fleet was not removed on client side?
*** auto search should target nearest available solar
*** [J?] ships slow down when in engage mode so you can't chase someone
*** Got logic error: "avoid point caused intersection" in add terrain
*** [?] terminated with network error
    After submitting first choice after discovering shields and
    selecting battleships. Probably an exception on server which
    didn't show again..?
*** init_data sends all data - should limit to "player_any"
*** weird that solar systems aren't automatically searched when colonized?
*** Ships validate their action using target information that the player can't see
*** look through all copy constructors to make sure they explicitly call parents
** [~] gui 
*** occasional segfault on client startup
*** game objects handle event before (non query window) interface widgets
    E.g. quit button or right panel
*** [?] only allow command action if *available* ships support it
*** Clicking interface response button also triggers click on minimap
*** [windows] choice_gui should not scale text!
*** sfg window does not resize on sfml window resize
*** command selectors drawn on top of each other
*** simulation step hangs on key escape abort game
    This was when client 1 aborts at frame -1, while client 2 is still
    in choice step. Server exits with error 'disconnect' and other
    client gets segfault. Perhaps the server failed to receive the
    leave game request from client 1 while it was waiting for the
    choice from client 2.
*** [redesign] client allows multiple development choices - server does not
* system design ideas
** possibility to save the game
** add expansion limitations e.g. nr of fleets and solar distance penalty
** add interaction "conquer" so only some ship classes can conquer a solar
** generalize game_settings::starting_fleet to some "starting bonus" 
** make detection stat determine which object stats are seen by client
   When an entity sees another entity, let evm update the highest
   "detection level" the owner has on that entity. In
   entity_package::limit_to, pass entities through a filter function
   parameterised by detection_level.
** add trigger system for e.g. upgrades, techs and solar facilities
*** hm_t<string, function> on_interaction (and prevent_interaction)
*** on_takeoff (for e.g. freighter ship)
*** extra_solar_dynamics
** ?add a command buffer so commands reach entities with distance based delay?
** ?make ship cost scale with upgrades?
** ?add a "dynamic data" hash map to game object
   For stuff like "has cargo x", "is jammed", "was scanned by player i" etc.

   No particular reason to not put this in normal class members?
** [?] try making a memcpy based serialization
   Maybe classes containing pointers can have a serial subclass?
* tweaks and fixes
** gui
*** show unhappy smiley by solar when unhappy
*** clicking ship label in target_gui should select/deselect all 
*** progress bars for production
*** update hover info panel on reload_data
    Need to track if this should load selected or hovered entities,
    i.e. track current "info" entities.
*** quick key to show missing resources at solars
*** pressing f should merge selected fleets
*** commands from a waypoint should if possible respect the incoming fleet policy
*** custom key bindings och eller wasd kontroller
*** protect from spacebar immediately after simulation is finished
*** add a vision map, build on reload_data
*** show ship health by marking ship vertices red
*** allow double-clicking ship to select all of same type
*** name and indicators for solars so you can tell them apart
** system
*** check whether non-culture governors should deprioritise pop-growth in relation to resources
    E.g. don't spend all resources on growing population.
*** possibility to manually override production at solar
*** add weight if a development would increase empire's max facility level
*** Consider increasing effect of hospital and ecosystem int
*** ship attack trajectories update too slow
*** ?decrease likelihood of finding treasure
*** ?ships should stop when they hit converge on a waypoint
* optimization
** drawing client side stuff starts taking time
   Consider not drawing complete universe on minimap
** fix grid tree so make_split takes less time
   Consider using simple linear split nodes, this will make it easier
   splitting between leaves.
** reduce sent data 
*** using an instruction based model
   With instructions for updating and removing existing entities. Let
   client request when new entities are needed. Then the server won't
   need to copy all entities and rebuild the grid, and the client also
   won't need to copy entities.

   This will require every function which modifies an entity to also
   register this in an update map, or, alternatively, a central
   "modify_entity" access point for this purpose. Reasonably, this
   could be designed by making all entity properties be part of a hash
   map. It will also require the client to list and ask for required
   entities each frame.

   Might cause so much extra work on server + extra calls that it
   slows down the whole process, plus it's quite a lot of work.
*** using compression
    An easier alternative would be to gather all frames in the packet
    and then compress it before sending, by inheriting
    sf::Packet::on[Send|Receive]().

    On client, first show computation progress and then show dl
    progress - check if sf::Packet::getDataSize() can be used for this
    purpose.
* content ideas
** [J?] scouts are possibly too lousy at fighting
** [J] add some tech/facility for pop crowd, ecology, water and space
* to be tested
** untested functionality
*** new trade interaction
*** new colonize interaction
** confirm bugs
*** [J?] "space_status: used more than space" reached after developing facility
*** [J?] interaction space combat should default to aggresive policy
*** [J?] add/fix bombard animation
*** [J?] progress bar goes behind right panel
*** [J?] upgraded fighters have too much health vs damage
*** [J?] sector boosts apply exponentially with level and should be lower
*** [J?] log panel grows sideways off screen, info panel follows
*** [J?] state of water, space and ecology of new solars is too random
*** [J?] solars run out of space after building some stuff
    Make facilities not use more space per level. Add facility
    attributes "provides space" and "provides water".
*** [J?] deleting command does not cause command to be removed on server
*** [J?] mass-based upgrade "warp drive" not applied to any ships
*** [J?] right click with selected ships creates waypoint with no incident commands
*** [J?] apply sector boost from research in solar
*** explosions are too long
** analyze
*** [?] solars dissapear from sight
*** [!confirm?] fleets don't seem to get cleared from client choice
   Client seems to remove fleets when instructed, and c.fleets is
   cleared. Server clears all fleets during pre step, and removes old
   fleets when applying commands.
*** ?? solar choice not saved when opening development gui
*** client created fleets can't be click-selected
* remember
** when updating a struct/class, also update serialization
* git pending
* fixed
** [J] save game
*** client: logical_error: add_entity: already exists: fleet:S#1
    Add game_object::idc to serialization.
** [J] fleeing units freeze in panic
** [J] terrain still creates intersections and unreachable areas which bug out the path search algorithm
** [J] confusing that you can't give fleets with orders orders
** [J] confusing that right mouse both targets and drags map
** [J] can't see when fleets are selected
** play testing
*** [J] drag map with right mouse
*** [J] show available buildings in alphabetical order
*** [J] set limits for zoom
*** [J] set limits for build queues
*** [J] client side fleet form needs to set heading
*** [J] update battleship shape vertices
*** [J] fleet should slow down and wait for ships that need time to accelerate
    Or ships should not need time to accelerate
*** [J] mining colony should really not build stuff unless explicitly requested
*** [J] track nr of kills for ships
*** [J] projectiles from fighters don't show, set minimum?
*** [J] shield and detection techs were researched in two turns
    10 pop, faccility level 3
*** [J] consistent size for drawing objects on minimap
** [J] add symbol for command fleet policy
** [J] impassable terrain
*** impassable polygons on map
** play testing
*** [J] add standby communication so socket_t doesn't timeout during choice step
*** [J] research gui
**** distinguish between already researched and can't research
**** show progress
*** [J] minimap too transparent
*** [J] solars stuck in terrain
*** [J?] validate choice: error: contained invalid development: hospital
    Possibly happened when the solar was conquered..? Fixed by
    ignoring invalid devs
*** [J] auto search for scouts
*** [J] somewhat faster general dev rate
*** [J?] first path point doesn't seem to get fixed by fix path
** [J] socket_t routines should have a timeout
** [J] governor: figure out why population grows ~10x faster in real game than in tests
** [J] Handle infinite recursion when there is no viable path.
** [J] ships should not be able to enter impassable terrain
** [J] ships should move slower and rotate faster in order to navigate geometries
** [J] mining too nerfed? Considering how mining weighting works, shouldn't get empty storage
** [J] residual client side waypoints (?when incoming units die?)
** [J] warp drive not listed for colonizers, mass 30 should match [10,100]?
** [J] commands between waypoints shown/not shown randomly during simulate
** [J] after game complete, client pre-step failed to load game data
** [J] Server segfaults if client disconnects during introduction
** [J] test that turrets work
** [J] initial missile turret gets shot down by initial fighter
** [J] distinct abbreviations for governors
** [J] Can't scroll sideways in log when drawn with single label.
** [J] treasure should only discover techs that are "next in line"
** [J] draw fleets' primary ship and count in flag
** [J] creating order with 0 ships still creates waypoint 
** [J] creating order with 0 ships still shows action gui
** [J] reduce research facility level req to level 3
** [J] military should also prefer building defensive facilities
** [J] start with missile turret level 1
** [J] fleet hover info should show ship counts
** [J] red should not be a player color
** [J] people become *very* unhappy under military and development governors
** [J] population quickly grows to limit 
** [J] some network error after ~20 turns
    Colonize action caused invalid governor
** [J] option to override solar's development? Annoying when e.g. first shipyard doesn't get built
    Home solar starts with shipyard level 1
** [J] show "leads to" in tech choice info
** [J?] annoying that enemy cluster flags update on unseen units
** [J?] don't give orders to send 0 units
** [J] solar keeps building new ships even though military choice is "none"
    Also builds freighter when told to build colonizer..? Empty choice
    was being reinitialized when normalized.
** play testing
*** [J] empty option added for governor gui
*** [J?] combat log sometimes repeats entries (at start/end of turn?)
*** [J] ship count box has unscaled text - unscale whole box
*** [J] ship count box frame gets fat when many rows
** [J?] make fleet move at below speed limit so ships can catch up
** [J?] consider making battle log be one label since building it seems to lag a bit
** [J?] explosion animation wave should fade faster and not turn back inwards
** [J?] fleet selectors a bit ugly with seperate ring and flag
** [J?] choice_gui buttons: graphics bugs when setting border width
** [J?] solar radius too large
** [J?] client::game::entity_at should respect zoom level
** [J] allow dragging waypoints
** play testing
*** [J] choice_gui needs a parameter "initial selection"
*** [J] choice_gui needs a parameter "help text"
*** [J] governor doesn't seem to chose a development
*** [J] solar selector hover needs to show developments
*** [J] need to actively query user when new research can be chosen
*** [J] test that techs show fulfilled faciltiy req 
** play testing
*** choice gui
    o [J] should sort options so available ones are to the left
    o [J] doesn't show which options are available
    o [J] difficult to see which option[s] is selected
    o [J] requirements for ships are not listed
    o [J] has no background
    o [J] can't always close with b_accept
*** gui general
    o [J] arrow keys move map too fast
    o [J] solar should show governor instead of *
** play test
   Selecting ship classes for production should be a global choice.
   Selecting facilities for development should be done automatically
   based on solar's governor type el.dyl. Then solar choice reduces to
   chosing what governor you want (could be almost the same as
   selecting enabled sectors).

   Allow setting governor for all selected solars.
   Show governor as symbol next to solar.

   Maybe create a non-physical entity "trade route" so that freighters
   automatically use trade routes when they are produced?

   [J?] Mining is OP
   [J?] People should be more unhappy! About crowding for example...
   [J?] Initiating action trade_to doesn't load cargo
   [J?] INVALID RESEARCH CHOICE: already discovered by search
   [J?] builds facility in one turn
   [J?] builds colonizer in one turn
   [J?] ship info should list upgrades
   [J?] after terraform: reset command. Also don't allow terraforming owned solars?
** governor
   Make a new general gui with image buttons for selection, that takes
   a hover callback which generates in depth information that is
   written to a common info panel below the buttons, as well as a
   result callback. development_gui should be able to use this
   structure (now only for research gui) as well as military choice
   gui and governor choice gui.
** [J?] Fleets a bit hard to see
** [J?] Small enemy ships IMPOSSIBLE to see!
** [J?] Range of vision difficult to see
** [J?] Solar hover_info should show ship class counts
** [J] better combat "feel"
    o [J?] slow down when entering combat
    o [J] make distance part of accuracy check and apply it in ship::move when checking shootability
    o [J?] increased angular rotational acceleration for large ships
    o [J?] increase damage / health ratio
    o [J?] increase rate of fire
    o [J] Corsairs don't beat fighters - set load time to 0 and increase damage and accuracy
** [J] split game_settings into parent classes client_settings and server_settings
** [J] apply upgrades in test_space_combat
** [J] too much randomness in testing - segfault in boost::random::mersenne_twister_engine
** [J] warning: non-diverse leaves in grid::node::make_split!
** [J] window freezes while waiting for other clients to connect
    Since wait_for_it() doesn't start window loop unless desktop is
    initialized.
** [J] implement new client communication structure
*** [J] Find a thread safe structure for accepting clients
    Consider that hm_t::operator[] is not thread safe, while at the
    same time handle_sigint can't wait for dispatch_client before
    setting socket_t::tc_stop.

*** [J] Server
    safe_game_access(gid) {
      o *lock* game ring
      o [get|create] game
      o *unlock* game ring
      o return game
    }

    safe_delete(gid) {
      o *lock* game ring
      o cleanup and erase game gid
      o *unlock* game ring
    }

    safe_game_count() {
      o *lock* game ring
      o result = games.count()
      o *unlock* game ring
    }

    safe_state(gid) {
      return safe_game_access(gid).state
    }
**** game_dispatcher
     while (server_status == run) {
       o *lock* game ring
       for (auto g : games) {
         if (g ready to launch) thread dispatch_game(g.id)
       }
       o *unlock* game ring
       o sleep a bit
     }
***** dispatch_game gid: only runs on game in init state
       // at this point, no more clients will pass the "can join game"
       // condition

       o game = safe_game_access(gid)
       o *lock* game 
       o get list of clients
       o *unlock* game 
       o join all client wait_for_game threads
       o game_handler.run()
       o disconnect clients
       o *lock* game 
       o set game state to complete
       o *unlock* game 
**** Listener
***** dispatch_client (add timeout for introduction protocol)
      o check server status
      o client >> gid >> settings >> name
      o game = safe_game_access(gid)
      o *lock* game
      o read game state
      o can_join = game state == init and game not full
      if (can_join) {
        o write to game: add client and (if new) settings
	o package = ok + id
      } else {
        o package = not ok
      }
      o *unlock* game gid
      o client << package
      o if (can_join) thread wait_for_game
****** wait_for_game gid
       while (safe_state(gid) == init) {
         c -> check_protocol(load_init, standby)
       }
       o if (safe_state(gid) == running) set client state to running
**** Signal Handler
     o set server status to stop
     o *lock* game ring
     for each game {
       *lock* game
       set status to stop
       *unlock* game
     }
     o *unlock* game ring
     o while (safe_game_count()) {
       for each game gid: if safe_state(gid) == complete: safe_delete(gid)
       sleep
     } 
*** [J] Mixed thread io on server
    *handle_sigint* sets thread_com to tc_stop, then *cleanup_clients*
    waits for thread_com == tc_complete.

    A) If the game has not been started, thread_com will never be set
    to tc_complete. *cleanup_clients* must check for games that have
    waiting clients but have not been started.

    B) Thread safety (low risk): if *handle_sigint* sets thread_com to tc_stop
    after it was set to tc_complete at end of dispatch_game,
    *cleanup_clients* will never complete.

    Instead, use separate input and output com variables; this should
    solve both problems.
*** [J] unexpected protocol exception using protocol any
*** [J?] client simulation step ends when all frames are loaded
*** [J] try to create a general structure for running com-threads
    Something along the lines of a function that takes a communication
    task and callbacks on_complete and on_fail, but also integrates
    with the window_loop somehow, and also works with multiple clients
    and datasets on the server side.
*** [J] client::query should take two com parameters: tr and tc
    They should use the socket_t::tc_* protocol. tc should be passed
    on to socket -> thread_com.
*** [J] window loop should take a parameter lc and return a response lr
*** [J] event handlers should set tc = tc_stop on abort event
*** [J] body callbacks should set lc = query_abort if tr == tc_stop
*** [J] client:::query should only call [send|receive]_packet once
** [J?] solars don't show player colors
** [J?] command_gui should not show during simulation!
   Add some kind of phase tracker variable
** [J] wrap all output in macro #ifdefined VERBOSE
** [J] terribly slow run on server, though not using CPU (network?)
** [J] don't show animations when loading data in pre/choice-step
** [J] add random animation-delay based on sub-frames (consistent for animation pairs)
** [J] make animation time parameter respect sub-frames
** [J] at start/end of ship path, interpolate around an inner point instead
** [J] bind animations to entities if available
** [J] Issue with "seen" being unset
   Solution: references in passed frames had been *deleted*.

   For some reason, the "seen" property of ships in passed data frames
   is unset, causing them to be ignored by the position kernel.
** [J] find suitable kernel for smooth ship visualization
** [J] non-active entities should not be labeled as seen by client
** [J] figure out why setting seen = is_active() for selector causes segfault
   Caused by attempting to dynamic cast an entity_selector* to a
   specific_selector<ship>* - presumably this requires some reference
   to the other parent class.
** using reduced granularity
    This requires the client to interpolate between frames.
** [J] make server handle signals instead of looping over true
** [J] make server clean up old games on completion
** [J] to big early advantage finding scouts in treasure, as they can search
** allow controls and stuff during simulation
** zoom in should target mouse point
** allow zoom, show entity info etc during simulation
** show accumulated research
** autofill commands with only those units which support the action
** research completes too fast
** "make your choice" and progress bar too low
** show ship stats in ship hover info
** [J] respect mouse position on zoom
** [J] waypoint, command and fleet selectors should invert zoom
** [J] No research progress shown
    Server does pool research points.
** [!] distinguish between interactions and auras (e.g. hive support)
   At the moment, non-targeted interactions are not applied at all
** [J] new better universe builder, possibly generate while exploring
** [J] possibility to find "treasures" when discovering new solar systems
   Combined with a new detection level stat of some kind.
** [J] technology still researches instantly, even when sector research is not active
** [J] extend_universe pushes solars into already discovered area
** [J] guarantee good nsolar in starting area
** [J] solars too tightly packed
** [J] zoom still doesn't run during simulation
** [J] make solar dynamics use sectors medicine and ecology
** [J] treasure found at solars that the client can't see
** [J] implement find_treasure
** hover info moves further down each time it's updated
** [J?] trade actions can't swap fleet action 
   since this prevents other ships in fleet from trading. Somewhat
   solved by default assigning one ship to special actions.
** [J] selecting in development_gui resets scroll
** facilities build to 100% but never complete
** [J?] add a list of animations to send to client rather than add explosion on ship removal
** [J?] add a battle-log to send to client
** [J] memory leak
   Forgot to clear buffer ship::local_all before adding new data.

   Note that entity_package::clear_entities does successfully
   deallocate, shown in test_memory().

   Memory loss triggered from game_handler.cpp: 29. Note that memory
   usage rises before distribute_frames starts working.

   valgrind says there is no memory leak in my code (just two small
   ones in *ld* and *esets*). However, almost all memory usage arises
   from the following location:

->42.95% (12,759,264B) 0x40FF62: st3::ship::operator=(st3::ship const&) (ship.h:18)
-> ->42.95% (12,759,264B) 0x4975EF: st3::ship::copy_from(st3::ship const&) (ship.cpp:561)
->   ->42.95% (12,759,264B) 0x492050: st3::ship::ship(st3::ship const&) (ship.cpp:137)
->     ->42.95% (12,759,264B) 0x496DC3: st3::ship::clone_impl() (ship.cpp:497)
->       ->42.95% (12,759,264B) 0x48FF6D: st3::game_object::clone() (game_object.cpp:46)
->         ->42.95% (12,759,264B) 0x40BBAF: st3::entity_package::copy_from(st3::game_data const&) (game_data.cpp:611)
->           ->42.95% (12,759,264B) 0x43AA44: simulation_step(st3::server::com&, st3::game_data&) (game_handler.cpp:29)
->           -> ->42.95% (12,759,264B) 0x43B550: st3::server::game_handler(st3::server::com&, st3::game_data&) (game_handler.cpp:113)
->           ->   ->42.95% (12,759,264B) 0x438FBC: main (server.cpp:34)


   Seemed fixed by clearing entity_grid at pre_step, but unfixed when
   inserting entities after clearing grid.

   Check that old fleets get cleared and that landed ships are not
   hiding at origin causing tree depth.

   Memory seems to rize in chunks at end/beginning of round.
** [J] log research and facility completion
** [J] show current research choice and progress in gui
** [J] available developments should also be in a scroll-window
** [J] priority buttons unresponsive to first right click
** [J] available developments' build button should be bottom aligned
** [J] development req list is not left-aligned
** [J] build log in client_game and add widget
** [J] redesign solar_gui
*** [J] add boosts in solar::developed()
*** [J] add button for showing research gui
*** [J] colonizer should carry 1000 ppl
*** [J] colonizer gets 0 progress
*** [J] sol -> developed() have name == "" in solar_gui
*** [J] find out why solar::development costs become inf on client side
*** [J] add development::node::progress replacing research and development points
*** [J] add parameter progress to graphics::selector_card 
*** [J] mining: automatically prioritize what is available inversely to storage
*** [J] add research_gui: wrap new development_gui with ok/cancel + progress
*** [J] use solar_selector::choice_data instead of desktop -> response.solar_choices
*** [J] make client::game::build_chioce use choice data from solar selectors
*** [J] three tabs: sectors, development, military
*** [J] sectors: remove template buttons
*** [J] remove research::solar_template_table
*** [J] allow selecting multiple templates, multiple ships but only one dev
*** [J?] development choice is forgotten by opening and closing solar gui
*** [J?] solar gui defaults to zeros even though choice_data is sent
** [J?] landed on negative development points after completing expansion factories
** [J] add "build" button on facilities in solar_gui
** [J] command selectors should update their position on each reload_data
   Maybe they are? They jump in direction of command...
** [J?] fleet suggests summon | travel when arriving at destination solar
** [J?] ships should set speed = 0 on liftoff
** [J?] warp drive way too fast
** [J?] mouse scroll should zoom
** new modified ship stats
** [J?] tag ships as e.g. small, large, bio, mech etc.
    This will allow techs applying upgrades to ships by type
** [J?] add ship attributes stealth, detection, regen and shield
** ships remain selected after fleet is created
** [J?] form fleet with F doesn't work
** [J?] ship upgrades e.g. warp drive do not respect e.g. !small for scout
** [J?] show unmet requirements for development::nodes with no dependencies
** [J] command selector policies uninitialized after reload
    Happened after fleet was idle at waypoint through round
** [J] reset_qw is called from event handlers, possibly breaking event loop
** [J] no delete button in command_gui
** [J] tech requirements list floods window
   Make scroll window?
** [J] command_gui: sfg::Image -> SetImage causes meshed image
   Consider making image with background color?
** [J] command_gui throws bad_weak_ptr
   In event handler, after moving ship button to tab_allocated

   Caused by removing a widget while in the parent widget's event loop
** [J] command_gui ship buttons cover complete table
** [J] graphics::ship_button drawn on weird angle
** [J] main_interface::reset_qw() does not clear command_gui radio buttons
** [J] fleets should try to set scatter point towards owned solar
** [J] fleets should try not to change the scatter point
** [J] fleets should suggest travel instead of scatter if target direction is free
** [J] remake command gui to handle fleet policies
** [J] after passing waypoint, fleet becomes idle
** [J] make reassignment in relocate_ships pass on origin
** [J] idle fleet keeps moving and therefore summons ships to keep moving
** [J] ship speed is not checked for max
** [J] replace references to ship stats
** [J] implement use of mass stat for detection, accuracy and graphics scale
** [J] implement use of evasion stat to counter accuracy
** [J] implement remaining ship_stats functions
** [J] remove physical_object::interact, call interactions in move phase
** [J] make solar call interactions in move phase
** [J] make fleet analytics use ship size to determine enemy strength
** [J] make fleet::suggest use enemy strength factor
** [J] implement ship::move using fleet::suggest
** [J] make fleet generate scatter_target
** [J] make client choice contain fleet policy
** [J] update ship data with regard to accuracy/mass/evasion interaction
** [J] build entity_seen_by matrix in game_data for use in search_targets
** solar development tree
   Just something a little bit more fun than "expansion[i]", e.g. move
   turrets here.
** [J] upgrade nano scout does not seem to reduce enemy sight range
** [J] make solars indicate when they can build
** [J] check that turrets apply level
** [J] setting a solar template should preserve the development choice
** [J] continue splitting up interfaces
** [J] make new "development" interface that can be used for research and facilities
** [J] allow selecting not to develop solar facilities
** add development::node::list_requirements + gui
** float priority values in solar gui can get negative value
** show fleet selector and dim vision radius
** fixed a bug where facility copy constructor didn't call development::node::node
** solar_selector doesn't seem to receive proper research_level pointer
** [J?] go through solar data
** [J] update serialization with development::node and subclasses
** [J] add development tree to makefile
** somewhere, solar development["military"] is being initialized
** make turrets hit different targets
** give ships reduced accuracy when not firing forwards
** ships built way to fast
** tech researched to fast
** template for culture growth should have more culture
** [J] development points aren't spent
** [J] set research points to same speed as development
** [J] client submitted invalid development: radar tower
** [J] too high production of development points
** [J] ships are drawn in color cnose only
** [J] infobox off screen
** [J] make solars show research and development points + level
** [J] solar development not paying resources
** [J?] fix solar gui to fit new solar choice
** [J?] new structure using JSON files for upgrades, ships and research
*** [J?] implement development_tree::available
*** [J?] look over serialization of all new types, eg newly added stuff in ship_stats
** [J] rewrite json access loops using special MemberBegin and Begin
** [J] write solar_data.json
** [J] replace ship_allocation with lookup keys in ship::table
    This includes adding graphics info to ship_data.json?
** [J] implement solar::development_tree::facility_tree()
** [J] write game_data::confirm_data that loads data and validates references
** [J] fix references to e.g. research::data::tree
** [J] ship::ship(ship_stats) must assign base_stats
** [J] data loader functions are accumulating sets e.g. upgrades
** [J] fill out ship_stats constructor
** moved target selection to specific class
** create a frame structure
   Introduced class entity_package parent to game_data, with entities
   and remove_entities. Then the distribution frame buffer can copy
   entities only from the game_data object, and the client
   distribution frame buffer can limit_to using only entities. This
   will require entity_package to limit_to without deallocating.

   Declared but not instantiated.
** template for mining that sets nessecary amount
** add explosions
** allow client to control/restructure fleets
*** allow ships to have no fleet
*** clear fleets with no command on client side
*** allow client to create fleets from ship clusters
** when client-created fleet is returned to client, com.source is empty
** ships aren't drawn because is_landed is not serialized
** make colonizers consume people
** commands for fleets with id "owned" by server don't pass validation
** test freighter ships
** fixed handling of partial sending of sf::Package
** added command origin for use in trade interaction
** fixed: ship production flipped out (uninitialized ship cost)
** [J?] introduce physical_game_object for ship and solar
   This way, we can limit targeting to physical entities, and avoid
   the hassle with tracking fleets when they split. Also, non-physical
   entity classes don't need to implement interaction related
   functionality. Also, client can reconstruct non-physical entities
   at will.
** [J?] make all interactions be buffered and then evaluated in post phase (remove solar post phase stuff)
** [J?] make landing be an interaction
** military template needs to respect ship build dependencies
** targeting a waypoint should not create a new waypoint
** float hp for ships
** selecting research should add it to "researched"
** research
*** [J] define choice::c_research
*** [J] research::data constructor
*** [J] research::data + choice::c_research serialization
*** [J] research choice gui
** Invalid (scrambled) research choice submitted
   Temp name variable was passed byref to button handler
** upgrade / interaction / game object makeover
*** [J] solar choice for invalid player after conquering solar
*** [J] make fleet selectors for enemy fleets
*** [J] ships should auto-engage
*** [J] newly colonized solars' dynamics generate NaN in all fields
*** [J] idle shouldn't be an action
*** [J] join fleet shouldn't be an action - use waypoints
*** [J] ships shouldn't be selectable
*** [J] trouble selecting things under non-owned things
*** [J] Colonize and join fleet commands are abandoned
*** [J] solar choice resets
*** [J] Need to remove "unseen" units when the area becomes seen
*** [J] insert + make_split loop in grid_tree causes segfault
    After giving a waypoint with some units an empty command "space combat"

    Fixed make_split criteria using median instead of mean
*** [J] distribute ships: way too spread out
*** [J] fleet selector: way to big
*** [J] Segfault 
    Apparently had to do with fleets loosing sight of targets and
    calling get_entity and stuff (and possibly passing shared_ptr to a
    temporary lambda function), however the main lesson is that
    unhandled exceptions from threads are not displayed properly in
    the debugger.

    After finding an enemy ship in game_data::search_targets(), at game_data.cpp:296

    Switched back to normal pointers, which helped in a simplified
    case, but now there is instead a sigabrt in the thread destructor
    of distribute_frames thread, right after ship fire.

    Consider deleting game_data copy constructor and only doing
    explicit assignment, possibly also explicit destruction.
*** [J] Figure out why server sends old waypoints in [prestep?]
*** [J] Figure out why commands dissapear 
    ... from waypoints (or only from selectors) without passing the
    trigger point

    Command selectors were not being rebuilt for waypoints
*** [J] change identifier::some_class_id to the_class::class_id
*** [J] introduce game object base class
**** [J] created base class header
**** [J] made game entity classes inherit game object
**** [J] inherit pre/post phase functions in game object classes
**** [J] define ptr classes (grid::tree should have a unique ptr?) and create functions
**** [J] change to virtual inheritance of game_object so entity_selector subclasses don't get duplicate inheritance
**** [J] add new files in build system: game_object, ship, waypoint
**** [J] go through game_data.cpp and move code to object classes
**** [J] implement game object class functions
**** [J] add fleet action functions e.g. land 
**** [J] the fleet is responsible for tracking action validity when target status changes
**** [J] fleets need to update data in pre phase and remember to update target position
**** [J] add an interaction class declaration
**** [J] implement the interaction class
**** decide how to distinguish between owned and non-owned target conditions
*** [J] add an upgrade class
*** [J] let ships have reference to upgrades instead of interactions
*** [J] let upgrades have interactions and stat-mods
*** [J] let upgrades define exclusivity for certain terms
*** [J] let ships have a compile_stats function, base and current stats
*** [J] let ships have a compile_interactions function
*** [J] let combat interactions use a ship::receive_damage function
*** [J] for each ship, check each interaction target condition for each target
*** [J] rebuild ship templates so they apply upgrades
*** [J] let the ship increment function be responsible for updating load time
    the interaction functions will be responsible for activating load time
*** [J] consider introducing a game_data::find_targets
   Conditioned on a ship::target_condition and a radius
*** [J] add fleet action definitions
*** [J] finish implementing new serialization/deserialization
*** [J] fix client game reloading of waypoints
*** [J] implement client game deserialize of game data
*** [J] remove game_data deserialize operator
*** let upgrades have an optional tick function
*** let upgrades have description 
*** [J] let upgrades define ship class exclusivity conditions
** invalid? allowed allocation from fleet and waypoint in parallel
    FIX: fleet selectors at waypoints initially have a command
    targeting the waypoint
** guaranteed_cast template for selectors instantiated in utility.cpp
**** needed because definition must be avilable
**** problematic because then utility depends on selector and graphics
**** FIX: moved to separate instantiation file
** BUG: client recieves distorted game object data
**** game_object component correct so far as specific_selector::create
**** for solar: c_military and beyond, data is scrambled
**** when displayed, all data seems corrupted
** BUG: ship function recieve_damage() is not serialized
    Need to externalize these functions.
** moved selector cast template instantiation back to utility
** implemented specific_selector<ship>
** implemented specific selector create function
** ship vision
** utility::random_int
** moved deserialize to com_client to avoid excessive server deps
** make minimap clickable
** get rid of sfml sub repo?
** hover info should depend on ownership
** exit query should listen to escape/return key events
** c_solar::template_map: multiple calls to empty_choice() crashes
    After second call, returned choice is *really* empty.
** military template sucks
** solar gui has transparent background
** no info about available resources in solar gui
** fixed bug: ship not removed after colonize before ship_solar_int
** fixed bug: com_client::query catches winner message
** fix ship swarm movement
** end game status not displayed
** After fixing leave game, server says invalid query on simulation
** lacking proper leave game functionality
** why does sending frames take so long?
   turns out this is game_data.increment()
** go through game_data::increment
** ships not showing on client since sockets redesign
** server socket mess
*** client_t must deallocate it's TcpSocket on dtor
    ... so that check_protocol can remove dc clients

    ... and server main must not deallocate them

    Perhaps move listening/accepting to server::com?

    Perhaps inherit sf::TcpSocket?
*** server::com needs a method 'bool has_multiple_clients()'
    To be run after check_protocol
*** check for protocol::leave in simulation step as well
** projectile graphics object
** sub divide solar dynamics so components are accessible from gui
** consider moving sub window classes to main window build routine
   so they can access tooltip etc.
** solar system stability tests
**** parallel cost subtractions
** turrets do no damage? take no damage?
    look over solar combat routines
** solar choice has negative values in solar tick
    possibly fixed by initializing summation var in allocation::count

    possibly fixed by limiting water usage checks to expansion
    sectors
** crowding death goes to NaN
** notes on some bugs
** fixes to solar dynamics resource payments
** ship build run away (increase cost/time?)
** bad default solar choice (add templates?)
**** added choice templates
**** how should choice template buttons trigger allocation button update?
     consider connecting a custom signal?
     remember to set sub window to build_info()
** sector expansion happens without resources
** added basic solar info
** added listening to proceed button
** digits are ugly
** clicking a solar (sub) query priority button causes segfault
    fix: used a normal pointer to the button
    since introduction of referenced buttons in event handlers
** clicking in solar gui also triggers game object event handler
** accepting solar gui does not destroy priority buttons
    fixed: byref widgets to event handlers
    ... nor does it destroy sub window buttons
    maybe stuck in event functions?
** frame rate is to high
** simulation step is not drawn
    Solved: fixed a bug where the simulation step event handler forgot
    to return a value.
** interface is drawn on mini-map^^
    Solved: note: sfgui draws on the latest view which was drawn upon,
    not on the current view!
** generalized client game window loops to a function
** adding a Box::Ptr in a Window fails internally (graphics.cpp: 209)
    error: bad_weak_ptr
    std::shared_ptr (count 4, weak 2)

    Probably caused by that methods are not called through a shared
    pointer in the constructor? Move constructor to create method...
** check that serializations still match content
** check choice sub allocation for military
** check that all initialize-functions are called
** figure out why file-global allocation sub classes init empty
    probably the keywords data they use is not initialized?
    moved to initializers
** c_solar::normalize uses countable_allocation::normalize
** fixed compile step errors
** [done] consider adding named string constants for sub sectors etc.
** fix: serialization templates prefer general over specific
** made specific allocation classes
** [done] add a turret class
** [done] implement vectorised allocation templates in graphics.cpp
** [done] apply updated solar (choice) structure in solar_tick
** figure out how to limit sub sector priority
** [done] default values for solar choice
** moved solar::choice_t to choice.h
** [done] finish cost.cpp
** [done] client_game::build_choice should link game object events to interface objects, e.g. solar clicked
** selector queue cycling
** targui scales with zoom
** comgui does not show action
** targui remembers selected entities
** targui text does not fit width
** [done] add to command: action (from above options)
** [done] add command::action to command::operator ==
** [done] add queue_level to command_selector
** [done] add queue_level checking to command_at
** [done] replace entity_at with entities_at
** [done] replace right click event handler with target option gui
** [done] implement command action in game_data::increment
** display victor
** client generated solar choice for other player's solar
   maybe happened after the solar was conquered?
   
   probably fixed: removing choices for non-owned solars in
   client::game::reload_data
** send victor to client on game completion
** solar gui does not draw buttons in resized window
** sending colonizer ships spends population
** template selector is ugly
** colonisation/transport ships
    and make some solars without defense
** incorrect population increment shown
** should respond to return/escape keys
** does not terminate on window close event
** minimap drawn over comgui
** [low priority] minimap bounding box drawn incorrectly after window resize
** defense build rates need to be checked
** fleets follow targets that leave sight
   check range of sight in update fleet data?
** fleets follow last assigned in split
** templates and feedback in solar gui
    show per round increments in overview
** [fixed?] solar gui lists increments per unit time
   game settings stores round length in ticks
** moved dt from game_data to game_settings to avoid duplicate in client_game
** removed entity_selector::allocated_ships
** setting up autotools
   aclocal generates aclocal.m4
   automake --add-missing uses configure.ac, aclocal.m3 and Makefile.am to build Makefile.in
   autoconf uses configure.ac to build configure
   configure uses Makefile.in to build Makefile
** [low priority] command_gui scales with zoom
** add template selector to gui
** implement templates in solar_gui.cpp
** faster initial expansion
** [fixed for single fleet relocation] fleet targets are lost on split (new id)
** fixed: orders targeting unseen targets disappear
   also targeting fleets that leave sight
** fixed a bug where bombarded solars get negative defense/population
** add attribute bool entity_selector.seen
    store entity selectors, but unset seen each round. Show non-seen
    entities as semi-transparent, non-interactive.
** fixed: player colors difficult to distinguish
** fixed: waypoints not dissapearing (had erased waypoint removal)
** fleets sent to waypoint remain idle
** fog of war
*** [done] give ships attribute sfloat vision
*** [done] give fleets attribute sfloat vision
*** [done] add fleet.vision to serialisation
*** [done] update fleet.vision in update_fleet_data()
*** [done] give solars attribute vision
*** send limited game data objects to client
     a fleet or solar is seen if it is owned or within vision range of
     an owned fleet or solar.
** research should influence ships
** fixed a bug where solar ships were not sent to client
** gave ships vision
** fixed a bug where waypoints were cleared between choice evaluations
** added research to solar gui
** added research influence in ship constructor
** added research to serialization
** solar choice interface
** replaced waypoint.landed_ships with checking fleet idle target
** added minimap, fixed text scale and position
** tempfix for: fleet growth goes negative
** fixed: idle fleet sent to waypoint remained idle
** fixed: waypoint removed though having landed ships
** research pooling
** better game round phase indicators
** command_gui should sort ships by type
** added ship class sub tables in command_gui
** fixed: ships that have left or died remain listed at waypoint
** fixed: fleet evaluation order impacted battle result
** added an entity_selector -> queue_level (select order queue)
** fixed: comgui does not close after choice step
** fixed: fleet speed limit = min(ship.speed)
** fixed: prevented creation of circular graphs
** fixed: when client deletes command + wp, server reinserts wp
** fixed: server removes waypoints with landed ships
** fixed: ships fire in order of fleet, unfair
** fixed: when targeting a fleet, server crashes because id changes
** fixed: fleet idle target
   when arriving to waypoint or client unsets command
   (waypoints now store landed ships)
** fixed: waypoint graph reconstruction
** fixed: command receive printout
** fixed: waypoints created when no sources selected
** fixed: fleet radius can decrease indefinitely
   the radius must be large enough so the player can select the fleet
** graphics::draw_ship different types and param scale
** discovered some new bugs, see notes.org
** fixed: waypoint pending_commands not updated
   for some odd reason fixed by looping over 
   for(k,v in all_wp) waypoints[k] = v;
   instead of assigning
   waypoints.insert(all_wp.begin(), all_wp.end());
** fixed: server seems to list waypoints multiple times
   caused by multiple \n in id?
   note that clients resend old waypoints!
** fixed: commands on waypoints are not handled in choice phase
** fixed: waypoints targeted by waypoints are deleted
** fixed: fleet does not show radius after waypoint trigger
   and can't be selected
** fixed: client rectangle upwards select does not work
** fixed: fleet position seems to be off
** added ship scale to draw routine so ships are larger in command gui
** fixed recursive ship increment/decrement through waypoints
** fixed a bug where remove command deleted the wrong entity
** command distance checker sees past end points
** best way to add external dependencies
   added sub directories to make
   consider linking to their git repos?
** when giving multiple fleet commands, all ships are assigned
** added command_gui
** added SFML and TGUI as submodules in external/src
   make will build them in external
** simplified ship drawing selection in game::draw_universe
** window transforms should remain to next round
** add waypoint to game_data serialization
** fix waypoint id check in game_data::target_position
** fixed relocate ships setting new ship fleet id
** add waypoint objects
    so that: 
    o commands don't need child commands
    o multiple fleets can meet at a waypoint
    o commands aren't source/target entities
** commands should not be targets
** solar system
** write selector::get_ships, remove selector::get_quantity
** upgrade to sfml2.2 
   to get window::hasFocus()
   to enable building ~/code/include/TGUI-0.6.7
   (note that tgui 0.6.6 should work with sfml2.0)
   https://tgui.eu/
** build and test ~/code/include/TGUI-0.6.7
** why is client receiving sig abort on disconnect? thread-related?
   exit was called in query thread
** game_data::increment (ship update)
** add fleet id tracker to ship, implement in apply choice
** game_data::apply_choice
*** planet command
*** fleet command
** fixed command incrementation interface, added fleet serialization
** merged draw and data responsibility in selector in client::game

** translate, zoom
** test event handling
    why don't commands show? - translate before rotate!
    why does selection rect draw at odd places? - use e.mouseMove.[x|y]
    why area select when click? - just tiny area select?
    find how to scale command arrow only lengthwise - transform order
** added utility
** client game: choice event return value
** server com: allocate/deallocate packet
** client game: draw command
** client game
*** build choice interface
**** clicked_at
     make a "selectable" class with meta info: id, type etc.
     
     make commands from and to selectables? or just from? just track
     selection? go back to having a "selected" attribute?
**** make_command
** split com into socket_t, com_client, com_server
** replaced client's game_handler with struct client_game
** implemented command serialization
** started writing choice_event handler
** client game
*** area_select
** server game
*** universe construction
**** game settings object
**** solar distribution
** client view dimensions set to match game_data.settings
** client simulation play/pause with space key
** fixed rudementary game_data build routine
** added game settings attributes
** fixed operator <<(packet, solar)
** added solar to drawing
** removed id attributes (stored in has map pair)
** added player to game_data 
** client game_data g0 should update after simulation
   replaced socket_t by socket_t* in query function

   apparently, passing ref(socket_t) (probably its the
   ref(sf::Packet?) to thread causes ~thread() which in turn causes
   abort
** server receives choice
   related to copying packets - fixed by using client_t* instead of
   client_t in queue.  

   gets n=-9744, for some reason still enters push loop. Test run with
   &&res in loop condition. Check if n is wrong from start.
* [old] basic goals
** server game
*** ship interactions
**** structure
***** let ship interactions be governed by interaction functions
***** introduce a ship specific table keyed on [action, t_target]
***** let the ship templates build the interaction function objects
***** interactions require the game data context to be available
***** may need an on-action-setup trigger for e.g. trade routes
***** let ships define a list of valid interactions
***** extension: let researched upgrades extend the interactions
**** list of
***** cargo ship, friendly solar: trade route (resource allocation?)
***** colonizer, neutral solar: colonize
***** fighter, enemy fleet: engage
***** bomber, enemy solar: bombard
*** consider neighbourhood trackers for ships
**** key the ship grid on player
**** look up friendly neighbours for boost interaction
**** look up opponent neighbours for fire interaction
*** fleet actions
**** require that all, some or no ships have some action available
**** available actions are extended by those defined by all ships
**** action complete callback for e.g. resume action after combat
**** also has reaction mode: engage on sight / focus target / flee
***** engage on sight is conditioned on: some fight
**** on interaction, run ship interaction functions if available
**** list of
***** none, friendly solar: land
***** some bombard, enemy solar: bombard
***** none, friendly fleet: join, follow
***** some fight, friendly fleet: guard
***** none, enemy fleet: follow
***** some fight, enemy fleet: engage
*** introduce cargo ships for mining colonies
*** introduce priorities with cost multipliers for ships
*** let ship build be conditioned on research and industry level
*** research structure
**** hash table
**** nodes with:
     requirement list
     cost
     level
     level-dependent modifier functions
     allow list
*** decide what to do with clients without objects
** client game
*** new command gui and target gui
**** target options: based on fleet and ship actions
**** targui defaults (depends on action design)
***** send all if from waypoint
***** send colonizer if command is colonize
***** only show gui if multiple targets
***** don't show self as target
**** command_gui should have option to allocate X ships of type T
*** choice/evolution: display ready players, autoplay when all ready
*** simulation: ?interpolate using ship velocity?
*** draw all ships in same size, have a ship.draw_scale
    so that ships can be drawn in same size in command gui
    but different sizes in universe
*** events board
    messages such as "your fleet was destroyed" or "your solar X
    merged with Bla's solar Y; your population won the ensuing battle"
** before game interface
* [old] long term goals
** strategy
*** different solars have different resources
    specific research projects
    specific production
*** research directions
**** vision
**** stealth
**** espionage
**** propulsion & navigation
**** weapons
**** shields
**** infrastructure
**** democracy
*** diplomatic agreements
**** cease fire
**** peace
**** military alliance
**** trade agreement
** tactics
*** new ships with trigger functions
**** make a solar build queue
***** ship/turret designer interface
***** ship design focus/priority
*** resources on map to match with buildings?
*** old ship model
**** ship components
    construct on grid with structure components? 
    each component has a type, size, energy usage, cost...
**** engine
**** energy
**** shield
**** weapons
**** hull
**** life support
**** cargo hold
**** ship types
***** bombers
     good at bombing solars
     bad at fighting any other ship
***** fighters
     good at fighting battleships
     bad at bombing solars
***** battleships
     good at destroying bombers
     bad at fighting fighters
***** transport
     automatically deployed ship for trade agreements
**** ship experience and fleet commanders
**** add ship rotation speed and ships can only fire forward
** world
*** generate map while exploring
*** define discovered area for players
*** treasures in space
*** terrain types
**** nebula
     damaging area with low sight
     find rare resources
**** high temperospatial curvature
     chance of worm-holes
     low navigation: risk going off course
     small ships risk falling in worm hole
**** asteroids
     slow travel speed
     find resources
     [low shields] risk damage
*** moving solars
*** barbarians
