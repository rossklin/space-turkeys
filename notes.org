* to do
** server game
*** game_data::apply_choice
**** ?upgrade choice?
**** planet command
**** fleet command
*** universe increment
**** ship interactions
**** solar evolution
** client game
*** build choice interface
**** ?upgrade_choice?
**** clicked_at
     consider moving command::selected property to a set in
     client::game. Also, fix so that each entity can have multiple
     associated commands.
**** make_command
**** translate, zoom
*** draw solar [, fleet, command, ..?]
** before game interface
* remember
** when updating a struct/class, also update serialization
* git pending
** split com into socket_t, com_client, com_server
** replaced client's game_handler with struct client_game
** implemented command serialization
** started writing choice_event handler
* fixed
** client game
*** area_select
** server game
*** universe construction
**** game settings object
**** solar distribution
** client view dimensions set to match game_data.settings
** client simulation play/pause with space key
** fixed rudementary game_data build routine
** added game settings attributes
** fixed operator <<(packet, solar)
** added solar to drawing
** removed id attributes (stored in has map pair)
** added player to game_data 
** client game_data g0 should update after simulation
   replaced socket_t by socket_t* in query function

   apparently, passing ref(socket_t) (probably its the
   ref(sf::Packet?) to thread causes ~thread() which in turn causes
   abort
** server receives choice
   related to copying packets - fixed by using client_t* instead of
   client_t in queue.  

   gets n=-9744, for some reason still enters push loop. Test run with
   &&res in loop condition. Check if n is wrong from start.
